#include <iostream>
#include <stdio.h>
#include <stdlib.h>

using namespace std;

void calc_FXC(double* dens, double* trad,
              double* vrho,double* vsigma,
              double* v2rho2,double* v2rhosigma,double *v2sigma2,
              double* v3rho3,double* v3rho2sigma,double* v3rhosigma2,double* v3sigma3,
              double* DDUM,double* VDUM)
{

/*
// para debug, punto 1
   v3rho2sigma[2] = 0.21513406048648667;
   v3rho2sigma[3] = v3rho2sigma[2];
   v3rho2sigma[9] = v3rho2sigma[2];
   v3rho2sigma[4] = 0.43026812097297401;
   v3rho2sigma[8] = v3rho2sigma[2];
   v3rho2sigma[10] = v3rho2sigma[4];
   v3rho2sigma[6] = 0.25512771523362898;
   v3rho2sigma[5] = v3rho2sigma[6];
   v3rho2sigma[7] = 0.51025543046725885;
//########################################
*/

// TRANSITION DENSITY
   double DUMNV[2], DXV[2], DYV[2], DZV[2];
   DUMNV[0]=trad[0];
   DXV[0]=trad[1];
   DYV[0]=trad[2];
   DZV[0]=trad[3];
   DUMNV[1]=trad[0];
   DXV[1]=trad[1];
   DYV[1]=trad[2];
   DZV[1]=trad[3];
/*
   cout << "DUMNV[0] " << DUMNV[0] << endl;
   cout << "DXV[0] " << DXV[0] << endl;
   cout << "DYV[0] " << DYV[0] << endl;
   cout << "DZV[0] " << DZV[0] << endl;
   cout << "DUMNV[1] " << DUMNV[1] << endl;
   cout << "DXV[1] " << DXV[1] << endl;
   cout << "DYV[1] " << DYV[1] << endl;
   cout << "DZV[1] " << DZV[1] << endl;
   exit(-1);
   // todo bien
*/

   double DUMGRV[4], DUMXX[4];
   DUMGRV[0]=DXV[0]*dens[1]+DYV[0]*dens[2]+DZV[0]*dens[3];
   DUMGRV[1]=DXV[1]*dens[1]+DYV[1]*dens[2]+DZV[1]*dens[3];
   DUMGRV[2]=DXV[0]*dens[1]+DYV[0]*dens[2]+DZV[0]*dens[3];
   DUMGRV[3]=DXV[1]*dens[1]+DYV[1]*dens[2]+DZV[1]*dens[3];
   DUMXX[0]=DXV[0]*DXV[0]+DYV[0]*DYV[0]+DZV[0]*DZV[0];
   DUMXX[1]=DXV[1]*DXV[1]+DYV[1]*DYV[1]+DZV[1]*DZV[1];
   DUMXX[2]=DXV[0]*DXV[1]+DYV[0]*DYV[1]+DZV[0]*DZV[1];
   DUMXX[3]=DUMXX[2];
   
/*
   cout << "DUMGRV[0] " << DUMGRV[0] << endl;
   cout << "DUMGRV[1] " << DUMGRV[1] << endl;
   cout << "DUMGRV[2] " << DUMGRV[2] << endl;
   cout << "DUMGRV[3] " << DUMGRV[3] << endl;
   cout << "DUMXX[0] " << DUMXX[0] << endl;
   cout << "DUMXX[1] " << DUMXX[1] << endl;
   cout << "DUMXX[2] " << DUMXX[2] << endl;
   cout << "DUMXX[3] " << DUMXX[3] << endl;
   exit(-1);
   // todo bien
*/

// F NON CORE
   double C[20];
// --AA COMPONENTS--
   C[0]=2.0f*(vsigma[0]+vsigma[2]);
   C[1]=v2rho2[0]+v2rho2[2];
   C[2]=2.0f*(v2rhosigma[0]+v2rhosigma[2]);
   C[3]=2.0f*(v2rhosigma[0]+v2rhosigma[2]);
   C[4]=v2rhosigma[4];
   C[5]=v2rhosigma[4];
   C[6]=4.0f*(v2sigma2[0]+v2sigma2[2]);
   C[7]=2.0f*v2sigma2[4];
   C[8]=2.0f*v2sigma2[4];
   C[9]=v2sigma2[7];

/*
   cout << "0 " << C[0] << endl;
   cout << "1 " << C[1] << endl;
   cout << "2 " << C[2] << endl;
   cout << "3 " << C[3] << endl;
   cout << "4 " << C[4] << endl;
   cout << "5 " << C[5] << endl;
   cout << "6 " << C[6] << endl;
   cout << "7 " << C[7] << endl;
   cout << "8 " << C[8] << endl;
   cout << "9 " << C[9] << endl;
   exit(-1);
   // todo bien
*/

   double DUMC, DUMXX1;
   DUMC=C[0];
   DUMXX1=DUMC*2.0f;
   double DUMNV1;
   DUMC=C[1];
   DUMNV1=DUMC*DUMNV[0]*2.0f;

   double DUMGRV1;
   DUMC=C[2]+C[3];
   DUMNV1=DUMNV1+DUMC*DUMGRV[0];
   DUMGRV1=DUMC*DUMNV[0];

   double DUMGRV3;
   DUMC=C[4]+C[5];
   DUMNV1=DUMNV1+DUMC*DUMGRV[2];
   DUMGRV3=DUMC*DUMNV[0];

   DUMC=C[6];
   DUMGRV1=DUMGRV1+C[6]*DUMGRV[0]*2.0f;
   DUMC=C[7]+C[8];
   DUMGRV1=DUMGRV1+DUMC*DUMGRV[2];
   DUMGRV3=DUMGRV3+DUMC*DUMGRV[0];
   DUMC=C[9];
   DUMGRV3=DUMGRV3+DUMC*DUMGRV[2]*2.0f;
  
/*
   cout << "DUMXX1 " << DUMXX1 << endl;
   cout << "DUMNV1 " << DUMNV1 << endl;
   cout << "DUMGRV1 " << DUMGRV1 << endl;
   cout << "DUMGRV3 " << DUMGRV3 << endl;
   exit(-1);
   // todo bien
*/

// --AB AND BA COMPONENTS--
   C[10]=vsigma[4];
   C[11]=v2rho2[3];
   C[12]=2.0f*v2rhosigma[3];
   C[13]=2.0f*v2rhosigma[5];
   C[14]=v2rhosigma[4];
   C[15]=v2rhosigma[7];
   C[16]=4.0f*v2sigma2[3];
   C[17]=2.0f*v2sigma2[4];
   C[18]=2.0f*v2sigma2[6];
   C[19]=v2sigma2[7];

   double DUMXX3, DUMNV2;
   DUMC=C[10]*2.0f;
   DUMXX3=DUMC;
   DUMC=C[11]*2.0f;
   DUMNV1=DUMNV1+DUMC*DUMNV[1];
   DUMNV2=DUMC*DUMNV[0];

   double DUMGRV2;
   DUMC=C[12]*2.0f;
   DUMNV1=DUMNV1+DUMC*DUMGRV[1];
   DUMGRV2=DUMC*DUMNV[0];
   DUMC=C[13]*2.0f;
   DUMNV2=DUMNV2+DUMC*DUMGRV[0];
   DUMGRV1=DUMGRV1+DUMC*DUMNV[1];

   double DUMGRV4;
   DUMC=C[14]*2.0f;
   DUMNV1=DUMNV1+DUMC*DUMGRV[3];
   DUMGRV4=DUMC*DUMNV[0];
   DUMC=C[15]*2.0f;
   DUMNV2=DUMNV2+DUMC*DUMGRV[2];
   DUMGRV3=DUMGRV3+DUMC*DUMNV[1];

   DUMC=C[16]*2.0f;
   DUMGRV1=DUMGRV1+DUMC*DUMGRV[1];
   DUMGRV2=DUMGRV2+DUMC*DUMGRV[0];
   DUMC=C[17]*2.0f;
   DUMGRV1=DUMGRV1+DUMC*DUMGRV[3];
   DUMGRV4=DUMGRV4+DUMC*DUMGRV[0];
   DUMC=C[18]*2.0f;
   DUMGRV2=DUMGRV2+DUMC*DUMGRV[2];
   DUMGRV3=DUMGRV3+DUMC*DUMGRV[1];
   DUMC=C[19]*2.0f;
   DUMGRV3=DUMGRV3+DUMC*DUMGRV[3];
   DUMGRV4=DUMGRV4+DUMC*DUMGRV[2];

/*
   cout << "DUMXX1 " << DUMXX1 << endl;
   cout << "DUMXX3 " << DUMXX3 << endl;
   cout << "DUMNV1 " << DUMNV1 << endl;
   cout << "DUMNV2 " << DUMNV2 << endl;
   cout << "DUMGRV1 " << DUMGRV1 << endl;
   cout << "DUMGRV2 " << DUMGRV2 << endl;
   cout << "DUMGRV3 " << DUMGRV3 << endl;
   cout << "DUMGRV4 " << DUMGRV4 << endl;
   exit(-1);
   // todo bien
*/

// --BB COMPONENTS--
   C[0]=2.0f*(vsigma[1]+vsigma[3]);
   C[1]=v2rho2[1]+v2rho2[4];
   C[2]=2.0f*(v2rhosigma[1]+v2rhosigma[6]);
   C[3]=2.0f*(v2rhosigma[1]+v2rhosigma[6]);
   C[4]=v2rhosigma[7];
   C[5]=v2rhosigma[7];
   C[6]=4.0f*(v2sigma2[1]+v2sigma2[5]);
   C[7]=2.0f*v2sigma2[6];
   C[8]=2.0f*v2sigma2[6];
   C[9]=v2sigma2[7];

   double DUMXX2;
   DUMC=C[0];
   DUMXX2=DUMC*2.0f;
   DUMC=C[1];
   DUMNV2=DUMNV2+DUMC*DUMNV[1]*2.0f;
   DUMC=C[2]+C[3];
   DUMNV2=DUMNV2+DUMC*DUMGRV[1];
   DUMGRV2=DUMGRV2+DUMC*DUMNV[1];
   DUMC=C[4]+C[5];
   DUMNV2=DUMNV2+DUMC*DUMGRV[3];
   DUMGRV4=DUMGRV4+DUMC*DUMNV[1];
   DUMC=C[6];
   DUMGRV2=DUMGRV2+DUMC*DUMGRV[1]*2.0f;
   DUMC=C[7]+C[8];
   DUMGRV2=DUMGRV2+DUMC*DUMGRV[3];
   DUMGRV4=DUMGRV4+DUMC*DUMGRV[1];
   DUMC=C[9];
   DUMGRV4=DUMGRV4+DUMC*DUMGRV[3]*2.0f;

// CONTRACTION OF FNC
   double FNCDOMA,FNCDOMAX,FNCDOMAY,FNCDOMAZ;
   FNCDOMA=DUMNV1;
   FNCDOMAX=DUMGRV1*dens[1]+DUMGRV3*dens[1]+
            DUMXX1*DXV[0]+DUMXX3*DXV[1];
   FNCDOMAY=DUMGRV1*dens[2]+DUMGRV3*dens[2]+
            DUMXX1*DYV[0]+DUMXX3*DYV[1];
   FNCDOMAZ=DUMGRV1*dens[3]+DUMGRV3*dens[3]+
            DUMXX1*DZV[0]+DUMXX3*DZV[1];

   double FNCDUMAX,FNCDUMAY,FNCDUMAZ;
   FNCDUMAX=DUMGRV1*DXV[0]+DUMGRV4*DXV[1];
   FNCDUMAY=DUMGRV1*DYV[0]+DUMGRV4*DYV[1];
   FNCDUMAZ=DUMGRV1*DZV[0]+DUMGRV4*DZV[1];

/*
   cout << "FNCDOMA " << FNCDOMA << endl;
   cout << "FNCDOMAX " << FNCDOMAX << endl;
   cout << "FNCDOMAY " << FNCDOMAY << endl;
   cout << "FNCDOMAZ " << FNCDOMAZ << endl;
   cout << "FNCDUMAX " << FNCDUMAX << endl;
   cout << "FNCDUMAY " << FNCDUMAY << endl;
   cout << "FNCDUMAZ " << FNCDUMAZ << endl;
   exit(-1);
   // todo bien
*/

   double FNCDOMB,FNCDOMBX,FNCDOMBY,FNCDOMBZ;
   FNCDOMB=DUMNV2;
   FNCDOMBX=DUMGRV2*dens[1]+DUMGRV4*dens[1]+
            DUMXX2*DXV[1]+DUMXX3*DXV[0];
   FNCDOMBY=DUMGRV2*dens[2]+DUMGRV4*dens[2]+
            DUMXX2*DYV[1]+DUMXX3*DYV[0];
   FNCDOMBZ=DUMGRV2*dens[3]+DUMGRV4*dens[3]+
            DUMXX2*DZV[1]+DUMXX3*DZV[0];

   double FNCDUMBX,FNCDUMBY,FNCDUMBZ;
   FNCDUMBX=DUMGRV2*DXV[1]+DUMGRV3*DXV[0];
   FNCDUMBY=DUMGRV2*DYV[1]+DUMGRV3*DYV[0];
   FNCDUMBZ=DUMGRV2*DZV[1]+DUMGRV3*DZV[0];

/*
   cout << "FNCDOMB " << FNCDOMB << endl;
   cout << "FNCDOMBX " << FNCDOMBX << endl;
   cout << "FNCDOMBY " << FNCDOMBY << endl;
   cout << "FNCDOMBZ " << FNCDOMBZ << endl;
   cout << "FNCDUMBX " << FNCDUMBX << endl;
   cout << "FNCDUMBY " << FNCDUMBY << endl;
   cout << "FNCDUMBZ " << FNCDUMBZ << endl;
   exit(-1);
   // todo bien
*/
// END F NON CORE


// F CORE
   C[0]=2.0f*DUMXX[0];
   C[1]=DUMNV[0]*DUMNV[0];
   C[2]=2.0f*DUMNV[0]*DUMGRV[0];
   C[3]=2.0f*DUMGRV[0]*DUMNV[0];
   C[4]=DUMGRV[0]*DUMNV[0];
   C[5]=DUMNV[0]*DUMGRV[0];
   C[6]=4.0f*DUMGRV[0]*DUMGRV[0];
   C[7]=2.0f*DUMGRV[0]*DUMGRV[0];
   C[8]=2.0f*DUMGRV[0]*DUMGRV[0];
   C[9]=DUMGRV[0]*DUMGRV[0];

// EXCHANGE
   double XDUMA,XDUMAG;
   XDUMA=C[0]*v2rhosigma[0];
   //jXDUMAG=C[0]*2.0f*EX(IIPT,KGAGA)
   XDUMAG=C[0]*2.0f*v2sigma2[0];

   //XDUMA=XDUMA+C2*EX(IIPT,KRARARA)
   XDUMA=XDUMA+C[1]*v3rho3[0];
   //XDUMAG=XDUMAG+C2*TWO*EX(IIPT,KRARAGA)
   XDUMAG=XDUMAG+C[1]*2.0f*v3rho2sigma[0];
   //XDUMA=XDUMA+C3*EX(IIPT,KRARAGA)
   XDUMA=XDUMA+C[2]*v3rho2sigma[0];
   //XDUMAG=XDUMAG+C3*TWO*EX(IIPT,KRAGAGA)
   XDUMAG=XDUMAG+C[2]*2.0f*v3rhosigma2[0];
   //XDUMA=XDUMA+C4*EX(IIPT,KRARAGA)
   XDUMA=XDUMA+C[3]*v3rho2sigma[0];
   //XDUMAG=XDUMAG+C4*TWO*EX(IIPT,KRAGAGA)
   XDUMAG=XDUMAG+C[3]*2.0f*v3rhosigma2[0];
   //XDUMA=XDUMA+C7*EX(IIPT,KRAGAGA)
   XDUMA=XDUMA+C[6]*v3rhosigma2[0];
   //XDUMAG=XDUMAG+C7*TWO*EX(IIPT,KGAGAGA)
   XDUMAG=XDUMAG+C[6]*2.0f*v3sigma3[0];

/*
   cout << "XDUMA " << XDUMA << endl;
   cout << "XDUMAG " << XDUMAG << endl;
   exit(-1);
   // todo bien
*/

// CORRELATION
   double CDUMA,CDUMAG1,CDUMAG2;
   //CDUMA=CDUMA+C1*EC(IIPT,IRAGA)
   CDUMA=C[0]*v2rhosigma[2];
   //CDUMAG1=CDUMAG1+C1*TWO*EC(IIPT,IGAGA)
   CDUMAG1=C[0]*2.0f*v2sigma2[2];
   //CDUMAG2=CDUMAG2+C1*EC(IIPT,IGAGC)
   CDUMAG2=C[0]*v2sigma2[4];
   //CDUMA=CDUMA+C2*EC(IIPT,IRARARA)
   CDUMA=CDUMA+C[1]*v3rho3[2];
   //CDUMAG1=CDUMAG1+C2*TWO*EC(IIPT,IRARAGA)
   CDUMAG1=CDUMAG1+C[1]*2.0f*v3rho2sigma[2];
   //CDUMAG2=CDUMAG2+C2*EC(IIPT,IRARAGC)
   CDUMAG2=CDUMAG2+C[1]*v3rho2sigma[4];
   //CDUMA=CDUMA+C3*EC(IIPT,IRARAGA)
   CDUMA=CDUMA+C[2]*v3rho2sigma[2];
   //CDUMAG1=CDUMAG1+C3*TWO*EC(IIPT,IRAGAGA)
   CDUMAG1=CDUMAG1+C[2]*2.0f*v3rhosigma2[2];
   //CDUMAG2=CDUMAG2+C3*EC(IIPT,IRAGAGC)
   CDUMAG2=CDUMAG2+C[2]*v3rhosigma2[4];
   //CDUMA=CDUMA+C4*EC(IIPT,IRARAGA)
   CDUMA=CDUMA+C[3]*v3rho2sigma[2];
   //CDUMAG1=CDUMAG1+C4*TWO*EC(IIPT,IRAGAGA)
   CDUMAG1=CDUMAG1+C[3]*2.0f*v3rhosigma2[2];
   //CDUMAG2=CDUMAG2+C4*EC(IIPT,IRAGAGC)
   CDUMAG2=CDUMAG2+C[3]*v3rhosigma2[4];
   //CDUMA=CDUMA+C5*EC(IIPT,IRARAGC)
   CDUMA=CDUMA+C[4]*v3rho2sigma[4];
   //CDUMAG1=CDUMAG1+C5*TWO*EC(IIPT,IRAGAGC)
   CDUMAG1=CDUMAG1+C[4]*2.0f*v3rhosigma2[4];
   //CDUMAG2=CDUMAG2+C5*EC(IIPT,IRAGCGC)
   CDUMAG2=CDUMAG2+C[4]*v3rhosigma2[7];
   //CDUMA=CDUMA+C6*EC(IIPT,IRARAGC)
   CDUMA=CDUMA+C[5]*v3rho2sigma[4];
   //CDUMAG1=CDUMAG1+C6*TWO*EC(IIPT,IRAGAGC)
   CDUMAG1=CDUMAG1+C[5]*2.0f*v3rhosigma2[4];
   //CDUMAG2=CDUMAG2+C6*EC(IIPT,IRAGCGC)
   CDUMAG2=CDUMAG2+C[5]*v3rhosigma2[7];
   //CDUMA=CDUMA+C7*EC(IIPT,IRAGAGA)
   CDUMA=CDUMA+C[6]*v3rhosigma2[2];
   //CDUMAG1=CDUMAG1+C7*TWO*EC(IIPT,IGAGAGA)
   CDUMAG1=CDUMAG1+C[6]*2.0f*v3sigma3[2];
   //CDUMAG2=CDUMAG2+C7*EC(IIPT,IGAGAGC)
   CDUMAG2=CDUMAG2+C[6]*v3sigma3[4];
   //CDUMA=CDUMA+C8*EC(IIPT,IRAGAGC)
   CDUMA=CDUMA+C[7]*v3rhosigma2[4];
   //CDUMAG1=CDUMAG1+C8*TWO*EC(IIPT,IGAGAGC)
   CDUMAG1=CDUMAG1+C[7]*2.0f*v3sigma3[4];
   //CDUMAG2=CDUMAG2+C8*EC(IIPT,IGAGCGC)
   CDUMAG2=CDUMAG2+C[7]*v3sigma3[7];
   //CDUMA=CDUMA+C9*EC(IIPT,IRAGAGC)
   CDUMA=CDUMA+C[8]*v3rhosigma2[4];
   //CDUMAG1=CDUMAG1+C9*TWO*EC(IIPT,IGAGAGC)
   CDUMAG1=CDUMAG1+C[8]*2.0f*v3sigma3[4];
   //CDUMAG2=CDUMAG2+C9*EC(IIPT,IGAGCGC)
   CDUMAG2=CDUMAG2+C[8]*v3sigma3[7];
   //CDUMA=CDUMA+C10*EC(IIPT,IRAGCGC)
   CDUMA=CDUMA+C[9]*v3rhosigma2[7];
   //CDUMAG1=CDUMAG1+C10*TWO*EC(IIPT,IGAGCGC)
   CDUMAG1=CDUMAG1+C[9]*2.0f*v3sigma3[7];
   //CDUMAG2=CDUMAG2+C10*EC(IIPT,IGCGCGC)
   CDUMAG2=CDUMAG2+C[9]*v3sigma3[11];
/*
   cout << "CDUMA " << CDUMA << endl;
   cout << "CDUMAG1 " << CDUMAG1 << endl;
   cout << "CDUMAG2 " << CDUMAG2 << endl;
   exit(-1);
   // todo bien
*/
   C[0]=2.0f*DUMXX[1];
   C[1]=DUMNV[1]*DUMNV[1];
   C[2]=2.0f*DUMNV[1]*DUMGRV[1];
   C[3]=2.0f*DUMGRV[1]*DUMNV[1];
   C[4]=DUMGRV[1]*DUMNV[1];
   C[5]=DUMNV[1]*DUMGRV[1];
   C[6]=4.0f*DUMGRV[1]*DUMGRV[1];
   C[7]=2.0f*DUMGRV[1]*DUMGRV[1];
   C[8]=2.0f*DUMGRV[1]*DUMGRV[1];
   C[9]=DUMGRV[1]*DUMGRV[1];

   //CDUMA=CDUMA+C1*EC(IIPT,IRAGB)
   CDUMA=CDUMA+C[0]*v2rhosigma[3];
   //CDUMAG1=CDUMAG1+C1*TWO*EC(IIPT,IGAGB)
   CDUMAG1=CDUMAG1+C[0]*2.0f*v2sigma2[3];
   //CDUMAG2=CDUMAG2+C1*EC(IIPT,IGBGC)
   CDUMAG2=CDUMAG2+C[0]*v2sigma2[6];
   //CDUMA=CDUMA+C2*EC(IIPT,IRARBRB)
   CDUMA=CDUMA+C[1]*v3rho3[4];
   //CDUMAG1=CDUMAG1+C2*TWO*EC(IIPT,IRBRBGA)
   CDUMAG1=CDUMAG1+C[1]*2.0f*v3rho2sigma[8];
   //CDUMAG2=CDUMAG2+C2*EC(IIPT,IRBRBGC)
   CDUMAG2=CDUMAG2+C[1]*v3rho2sigma[10];
   //CDUMA=CDUMA+C3*EC(IIPT,IRARBGB)
   CDUMA=CDUMA+C[2]*v3rho2sigma[6];
   //CDUMAG1=CDUMAG1+C3*TWO*EC(IIPT,IRBGAGB)
   CDUMAG1=CDUMAG1+C[2]*2.0f*v3rhosigma2[9];
   //CDUMAG2=CDUMAG2+C3*EC(IIPT,IRBGBGC)
   CDUMAG2=CDUMAG2+C[2]*v3rhosigma2[12];
   //CDUMA=CDUMA+C4*EC(IIPT,IRARBGB)
   CDUMA=CDUMA+C[3]*v3rho2sigma[6];
   //CDUMAG1=CDUMAG1+C4*TWO*EC(IIPT,IRBGAGB)
   CDUMAG1=CDUMAG1+C[3]*2.0f*v3rhosigma2[9];
   //CDUMAG2=CDUMAG2+C4*EC(IIPT,IRBGBGC)
   CDUMAG2=CDUMAG2+C[3]*v3rhosigma2[12];
   //CDUMA=CDUMA+C5*EC(IIPT,IRARBGC)
   CDUMA=CDUMA+C[4]*v3rho2sigma[7];
   //CDUMAG1=CDUMAG1+C5*TWO*EC(IIPT,IRBGAGC)
   CDUMAG1=CDUMAG1+C[4]*2.0f*v3rhosigma2[10];
   //CDUMAG2=CDUMAG2+C5*EC(IIPT,IRBGCGC)
   CDUMAG2=CDUMAG2+C[4]*v3rhosigma2[13];
   //CDUMA=CDUMA+C6*EC(IIPT,IRARBGC)
   CDUMA=CDUMA+C[5]*v3rho2sigma[7];
   //CDUMAG1=CDUMAG1+C6*TWO*EC(IIPT,IRBGAGC)
   CDUMAG1=CDUMAG1+C[5]*2.0f*v3rhosigma2[10];
   //CDUMAG2=CDUMAG2+C6*EC(IIPT,IRBGCGC)
   CDUMAG2=CDUMAG2+C[5]*v3rhosigma2[13];
   //CDUMA=CDUMA+C7*EC(IIPT,IRAGBGB)
   CDUMA=CDUMA+C[6]*v3rhosigma2[5];
   //CDUMAG1=CDUMAG1+C7*TWO*EC(IIPT,IGAGBGB)
   CDUMAG1=CDUMAG1+C[6]*2.0f*v3sigma3[5];
   //CDUMAG2=CDUMAG2+C7*EC(IIPT,IGBGBGC)
   CDUMAG2=CDUMAG2+C[6]*v3sigma3[9];
   //CDUMA=CDUMA+C8*EC(IIPT,IRAGBGC)
   CDUMA=CDUMA+C[7]*v3rhosigma2[6];
   //CDUMAG1=CDUMAG1+C8*TWO*EC(IIPT,IGAGBGC)
   CDUMAG1=CDUMAG1+C[7]*2.0f*v3sigma3[6];
   //CDUMAG2=CDUMAG2+C8*EC(IIPT,IGBGCGC)
   CDUMAG2=CDUMAG2+C[7]*v3sigma3[10];
   //CDUMA=CDUMA+C9*EC(IIPT,IRAGBGC)
   CDUMA=CDUMA+C[8]*v3rhosigma2[6];
   //CDUMAG1=CDUMAG1+C9*TWO*EC(IIPT,IGAGBGC)
   CDUMAG1=CDUMAG1+C[8]*2.0f*v3sigma3[6];
   //CDUMAG2=CDUMAG2+C9*EC(IIPT,IGBGCGC)
   CDUMAG2=CDUMAG2+C[8]*v3sigma3[10];
   //CDUMA=CDUMA+C10*EC(IIPT,IRAGCGC)
   CDUMA=CDUMA+C[9]*v3rhosigma2[7];
   //CDUMAG1=CDUMAG1+C10*TWO*EC(IIPT,IGAGCGC)
   CDUMAG1=CDUMAG1+C[9]*2.0f*v3sigma3[7];
   //CDUMAG2=CDUMAG2+C10*EC(IIPT,IGCGCGC)
   CDUMAG2=CDUMAG2+C[9]*v3sigma3[11];

/*
   cout << "CDUMA " << CDUMA << endl;
   cout << "CDUMAG1 " << CDUMAG1 << endl;
   cout << "CDUMAG2 " << CDUMAG2 << endl;
   exit(-1);
   // todo bien
*/

   C[10]=DUMXX[2];
   C[11]=DUMNV[0]*DUMNV[1];
   C[12]=2.0f*DUMNV[0]*DUMGRV[1];
   C[13]=2.0f*DUMGRV[0]*DUMNV[1];
   C[14]=DUMNV[0]*DUMGRV[3];
   C[15]=DUMGRV[2]*DUMNV[1];
   C[16]=4.0f*DUMGRV[0]*DUMGRV[1];
   C[17]=2.0f*DUMGRV[0]*DUMGRV[3];
   C[18]=2.0f*DUMGRV[2]*DUMGRV[1];
   C[19]=DUMGRV[2]*DUMGRV[3];

   //CDUMA=CDUMA+C11*EC(IIPT,IRAGC)
   CDUMA=CDUMA+C[10]*v2rhosigma[4];
   //CDUMAG1=CDUMAG1+C11*TWO*EC(IIPT,IGAGC)
   CDUMAG1=CDUMAG1+C[10]*2.0f*v2sigma2[4];
   //CDUMAG2=CDUMAG2+C11*EC(IIPT,IGCGC)
   CDUMAG2=CDUMAG2+C[10]*v2sigma2[7];
   //CDUMA=CDUMA+C12*EC(IIPT,IRARARB)
   CDUMA=CDUMA+C[11]*v3rho3[3];
   //CDUMAG1=CDUMAG1+C12*TWO*EC(IIPT,IRARBGA)
   CDUMAG1=CDUMAG1+C[11]*2.0f*v3rho2sigma[5];
   //CDUMAG2=CDUMAG2+C12*EC(IIPT,IRARBGC)
   CDUMAG2=CDUMAG2+C[11]*v3rho2sigma[7];
   //CDUMA=CDUMA+C13*EC(IIPT,IRARAGB)
   CDUMA=CDUMA+C[12]*v3rho2sigma[3];
   //CDUMAG1=CDUMAG1+C13*TWO*EC(IIPT,IRAGAGB)
   CDUMAG1=CDUMAG1+C[12]*2.0f*v3rhosigma2[3];
   //CDUMAG2=CDUMAG2+C13*EC(IIPT,IRAGBGC)
   CDUMAG2=CDUMAG2+C[12]*v3rhosigma2[6];
   //CDUMA=CDUMA+C14*EC(IIPT,IRARBGA)
   CDUMA=CDUMA+C[13]*v3rho2sigma[5];
   //CDUMAG1=CDUMAG1+C14*TWO*EC(IIPT,IRBGAGA)
   CDUMAG1=CDUMAG1+C[13]*2.0f*v3rhosigma2[8];
   //CDUMAG2=CDUMAG2+C14*EC(IIPT,IRBGAGC)
   CDUMAG2=CDUMAG2+C[13]*v3rhosigma2[10];
   //CDUMA=CDUMA+C15*EC(IIPT,IRARAGC)
   CDUMA=CDUMA+C[14]*v3rho2sigma[4];
   //CDUMAG1=CDUMAG1+C15*TWO*EC(IIPT,IRAGAGC)
   CDUMAG1=CDUMAG1+C[14]*2.0f*v3rhosigma2[4];
   //CDUMAG2=CDUMAG2+C15*EC(IIPT,IRAGCGC)
   CDUMAG2=CDUMAG2+C[14]*v3rhosigma2[7];
   //CDUMA=CDUMA+C16*EC(IIPT,IRARBGC)
   CDUMA=CDUMA+C[15]*v3rho2sigma[7];
   //CDUMAG1=CDUMAG1+C16*TWO*EC(IIPT,IRBGAGC)
   CDUMAG1=CDUMAG1+C[15]*2.0f*v3rhosigma2[10];
   //CDUMAG2=CDUMAG2+C16*EC(IIPT,IRBGCGC)
   CDUMAG2=CDUMAG2+C[15]*v3rhosigma2[13];
   //CDUMA=CDUMA+C17*EC(IIPT,IRAGAGB)
   CDUMA=CDUMA+C[16]*v3rhosigma2[3];
   //CDUMAG1=CDUMAG1+C17*TWO*EC(IIPT,IGAGAGB)
   CDUMAG1=CDUMAG1+C[16]*2.0f*v3sigma3[3];
   //CDUMAG2=CDUMAG2+C17*EC(IIPT,IGAGBGC)
   CDUMAG2=CDUMAG2+C[16]*v3sigma3[6];
   //CDUMA=CDUMA+C18*EC(IIPT,IRAGAGC)
   CDUMA=CDUMA+C[17]*v3rhosigma2[4];
   //CDUMAG1=CDUMAG1+C18*TWO*EC(IIPT,IGAGAGC)
   CDUMAG1=CDUMAG1+C[17]*2.0f*v3sigma3[4];
   //CDUMAG2=CDUMAG2+C18*EC(IIPT,IGAGCGC)
   CDUMAG2=CDUMAG2+C[17]*v3sigma3[7];
   //CDUMA=CDUMA+C19*EC(IIPT,IRAGBGC)
   CDUMA=CDUMA+C[18]*v3rhosigma2[6];
   //CDUMAG1=CDUMAG1+C19*TWO*EC(IIPT,IGAGBGC)
   CDUMAG1=CDUMAG1+C[18]*2.0f*v3sigma3[6];
   //CDUMAG2=CDUMAG2+C19*EC(IIPT,IGBGCGC)
   CDUMAG2=CDUMAG2+C[18]*v3sigma3[10];
   //CDUMA=CDUMA+C20*EC(IIPT,IRAGCGC)
   CDUMA=CDUMA+C[19]*v3rhosigma2[7];
   //CDUMAG1=CDUMAG1+C20*TWO*EC(IIPT,IGAGCGC)
   CDUMAG1=CDUMAG1+C[19]*2.0f*v3sigma3[7];
   //CDUMAG2=CDUMAG2+C20*EC(IIPT,IGCGCGC)
   CDUMAG2=CDUMAG2+C[19]*v3sigma3[11];

/*
   cout << "CDUMA " << CDUMA << endl;
   cout << "CDUMAG1 " << CDUMAG1 << endl;
   cout << "CDUMAG2 " << CDUMAG2 << endl;
   exit(-1);
   // todo bien
*/

// **BA_TERM=AB_TERM**
   C[10]=DUMXX[2];
   C[11]=DUMNV[0]*DUMNV[1];
   C[12]=2.0f*DUMNV[0]*DUMGRV[1];
   C[13]=2.0f*DUMGRV[0]*DUMNV[1];
   C[14]=DUMNV[0]*DUMGRV[3];
   C[15]=DUMGRV[2]*DUMNV[1];
   C[16]=4.0f*DUMGRV[0]*DUMGRV[1];
   C[17]=2.0f*DUMGRV[0]*DUMGRV[3];
   C[18]=2.0f*DUMGRV[2]*DUMGRV[1];
   C[19]=DUMGRV[2]*DUMGRV[3];

   //CDUMA=CDUMA+C11*EC(IIPT,IRAGC)
   CDUMA=CDUMA+C[10]*v2rhosigma[4];
   //CDUMAG1=CDUMAG1+C11*TWO*EC(IIPT,IGAGC)
   CDUMAG1=CDUMAG1+C[10]*2.0f*v2sigma2[4];
   //CDUMAG2=CDUMAG2+C11*EC(IIPT,IGCGC)
   CDUMAG2=CDUMAG2+C[10]*v2sigma2[7];
   //CDUMA=CDUMA+C12*EC(IIPT,IRARARB)
   CDUMA=CDUMA+C[11]*v3rho3[3];
   //CDUMAG1=CDUMAG1+C12*TWO*EC(IIPT,IRARBGA)
   CDUMAG1=CDUMAG1+C[11]*2.0f*v3rho2sigma[5];
   //CDUMAG2=CDUMAG2+C12*EC(IIPT,IRARBGC)
   CDUMAG2=CDUMAG2+C[11]*v3rho2sigma[7];
   //CDUMA=CDUMA+C13*EC(IIPT,IRARAGB)
   CDUMA=CDUMA+C[12]*v3rho2sigma[3];
   //CDUMAG1=CDUMAG1+C13*TWO*EC(IIPT,IRAGAGB)
   CDUMAG1=CDUMAG1+C[12]*2.0f*v3rhosigma2[3];
   //CDUMAG2=CDUMAG2+C13*EC(IIPT,IRAGBGC)
   CDUMAG2=CDUMAG2+C[12]*v3rhosigma2[6];
   //CDUMA=CDUMA+C14*EC(IIPT,IRARBGA)
   CDUMA=CDUMA+C[13]*v3rho2sigma[5];
   //CDUMAG1=CDUMAG1+C14*TWO*EC(IIPT,IRBGAGA)
   CDUMAG1=CDUMAG1+C[13]*2.0f*v3rhosigma2[8];
   //CDUMAG2=CDUMAG2+C14*EC(IIPT,IRBGAGC)
   CDUMAG2=CDUMAG2+C[13]*v3rhosigma2[10];
   //CDUMA=CDUMA+C15*EC(IIPT,IRARAGC)
   CDUMA=CDUMA+C[14]*v3rho2sigma[4];
   //CDUMAG1=CDUMAG1+C15*TWO*EC(IIPT,IRAGAGC)
   CDUMAG1=CDUMAG1+C[14]*2.0f*v3rhosigma2[4];
   //CDUMAG2=CDUMAG2+C15*EC(IIPT,IRAGCGC)
   CDUMAG2=CDUMAG2+C[14]*v3rhosigma2[7];
   //CDUMA=CDUMA+C16*EC(IIPT,IRARBGC)
   CDUMA=CDUMA+C[15]*v3rho2sigma[7];
   //CDUMAG1=CDUMAG1+C16*TWO*EC(IIPT,IRBGAGC)
   CDUMAG1=CDUMAG1+C[15]*2.0f*v3rhosigma2[10];
   //CDUMAG2=CDUMAG2+C16*EC(IIPT,IRBGCGC)
   CDUMAG2=CDUMAG2+C[15]*v3rhosigma2[13];
   //CDUMA=CDUMA+C17*EC(IIPT,IRAGAGB)
   CDUMA=CDUMA+C[16]*v3rhosigma2[3];
   //CDUMAG1=CDUMAG1+C17*TWO*EC(IIPT,IGAGAGB)
   CDUMAG1=CDUMAG1+C[16]*2.0f*v3sigma3[3];
   //CDUMAG2=CDUMAG2+C17*EC(IIPT,IGAGBGC)
   CDUMAG2=CDUMAG2+C[16]*v3sigma3[6];
   //CDUMA=CDUMA+C18*EC(IIPT,IRAGAGC)
   CDUMA=CDUMA+C[17]*v3rhosigma2[4];
   //CDUMAG1=CDUMAG1+C18*TWO*EC(IIPT,IGAGAGC)
   CDUMAG1=CDUMAG1+C[17]*2.0f*v3sigma3[4];
   //CDUMAG2=CDUMAG2+C18*EC(IIPT,IGAGCGC)
   CDUMAG2=CDUMAG2+C[17]*v3sigma3[7];
   //CDUMA=CDUMA+C19*EC(IIPT,IRAGBGC)
   CDUMA=CDUMA+C[18]*v3rhosigma2[6];
   //CDUMAG1=CDUMAG1+C19*TWO*EC(IIPT,IGAGBGC)
   CDUMAG1=CDUMAG1+C[18]*2.0f*v3sigma3[6];
   //CDUMAG2=CDUMAG2+C19*EC(IIPT,IGBGCGC)
   CDUMAG2=CDUMAG2+C[18]*v3sigma3[10];
   //CDUMA=CDUMA+C20*EC(IIPT,IRAGCGC)
   CDUMA=CDUMA+C[19]*v3rhosigma2[7];
   //CDUMAG1=CDUMAG1+C20*TWO*EC(IIPT,IGAGCGC)
   CDUMAG1=CDUMAG1+C[19]*2.0f*v3sigma3[7];
   //CDUMAG2=CDUMAG2+C20*EC(IIPT,IGCGCGC)
   CDUMAG2=CDUMAG2+C[19]*v3sigma3[11];

/*
   cout << "CDUMA " << CDUMA << endl;
   cout << "CDUMAG1 " << CDUMAG1 << endl;
   cout << "CDUMAG2 " << CDUMAG2 << endl;
   exit(-1);
   // todo bien
*/

   C[0]=2.0f*DUMXX[0];
   C[1]=DUMNV[0]*DUMNV[0];
   C[2]=2.0f*DUMNV[0]*DUMGRV[0];
   C[3]=2.0f*DUMGRV[0]*DUMNV[0];
   C[4]=DUMGRV[0]*DUMNV[0];
   C[5]=DUMNV[0]*DUMGRV[0];
   C[6]=4.0f*DUMGRV[0]*DUMGRV[0];
   C[7]=2.0f*DUMGRV[0]*DUMGRV[0];
   C[8]=2.0f*DUMGRV[0]*DUMGRV[0];
   C[9]=DUMGRV[0]*DUMGRV[0];

// CORRELATION
   double CDUMB,CDUMBG1,CDUMBG2;
   //CDUMB=C1*EC(IIPT,IRBGA)
   CDUMB=C[0]*v2rhosigma[5];
   //CDUMBG1=C1*TWO*EC(IIPT,IGAGB)
   CDUMBG1=C[0]*2.0f*v2sigma2[3];
   //CDUMBG2=C1*EC(IIPT,IGAGC)
   CDUMBG2=C[0]*v2sigma2[4];
   //CDUMB=CDUMB+C2*EC(IIPT,IRARARB)
   CDUMB=CDUMB+C[1]*v3rho3[3];
   //CDUMBG1=CDUMBG1+C2*TWO*EC(IIPT,IRARAGB)
   CDUMBG1=CDUMBG1+C[1]*2.0f*v3rho2sigma[3];
   //CDUMBG2=CDUMBG2+C2*EC(IIPT,IRARAGC)
   CDUMBG2=CDUMBG2+C[1]*v3rho2sigma[4];
   //CDUMB=CDUMB+C3*EC(IIPT,IRARBGA)
   CDUMB=CDUMB+C[2]*v3rho2sigma[5];
   //CDUMBG1=CDUMBG1+C3*TWO*EC(IIPT,IRAGAGB)
   CDUMBG1=CDUMBG1+C[2]*2.0f*v3rhosigma2[3];
   //CDUMBG2=CDUMBG2+C3*EC(IIPT,IRAGAGC)
   CDUMBG2=CDUMBG2+C[2]*v3rhosigma2[4];
   //CDUMB=CDUMB+C4*EC(IIPT,IRARBGA)
   CDUMB=CDUMB+C[3]*v3rho2sigma[5];
   //CDUMBG1=CDUMBG1+C4*TWO*EC(IIPT,IRAGAGB)
   CDUMBG1=CDUMBG1+C[3]*2.0f*v3rhosigma2[3];
   //CDUMBG2=CDUMBG2+C4*EC(IIPT,IRAGAGC)
   CDUMBG2=CDUMBG2+C[3]*v3rhosigma2[4];
   //CDUMB=CDUMB+C5*EC(IIPT,IRARBGC)
   CDUMB=CDUMB+C[4]*v3rho2sigma[7];
   //CDUMBG1=CDUMBG1+C5*TWO*EC(IIPT,IRAGBGC)
   CDUMBG1=CDUMBG1+C[4]*2.0f*v3rhosigma2[6];
   //CDUMBG2=CDUMBG2+C5*EC(IIPT,IRAGCGC)
   CDUMBG2=CDUMBG2+C[4]*v3rhosigma2[7];
   //CDUMB=CDUMB+C6*EC(IIPT,IRARBGC)
   CDUMB=CDUMB+C[5]*v3rho2sigma[7];
   //CDUMBG1=CDUMBG1+C6*TWO*EC(IIPT,IRAGBGC)
   CDUMBG1=CDUMBG1+C[5]*2.0f*v3rhosigma2[6];
   //CDUMBG2=CDUMBG2+C6*EC(IIPT,IRAGCGC)
   CDUMBG2=CDUMBG2+C[5]*v3rhosigma2[7];
   //CDUMB=CDUMB+C7*EC(IIPT,IRBGAGA)
   CDUMB=CDUMB+C[6]*v3rhosigma2[8];
   //CDUMBG1=CDUMBG1+C7*TWO*EC(IIPT,IGAGAGB)
   CDUMBG1=CDUMBG1+C[6]*2.0f*v3sigma3[3];
   //CDUMBG2=CDUMBG2+C7*EC(IIPT,IGAGAGC)
   CDUMBG2=CDUMBG2+C[6]*v3sigma3[4];
   //CDUMB=CDUMB+C8*EC(IIPT,IRBGAGC)
   CDUMB=CDUMB+C[7]*v3rhosigma2[10];
   //CDUMBG1=CDUMBG1+C8*TWO*EC(IIPT,IGAGBGC)
   CDUMBG1=CDUMBG1+C[7]*2.0f*v3sigma3[6];
   //CDUMBG2=CDUMBG2+C8*EC(IIPT,IGAGCGC)
   CDUMBG2=CDUMBG2+C[7]*v3sigma3[7];
   //CDUMB=CDUMB+C9*EC(IIPT,IRBGAGC)
   CDUMB=CDUMB+C[8]*v3rhosigma2[10];
   //CDUMBG1=CDUMBG1+C9*TWO*EC(IIPT,IGAGBGC)
   CDUMBG1=CDUMBG1+C[8]*2.0f*v3sigma3[6];
   //CDUMBG2=CDUMBG2+C9*EC(IIPT,IGAGCGC)
   CDUMBG2=CDUMBG2+C[8]*v3sigma3[7];
   //CDUMB=CDUMB+C10*EC(IIPT,IRBGCGC)
   CDUMB=CDUMB+C[9]*v3rhosigma2[13];
   //CDUMBG1=CDUMBG1+C10*TWO*EC(IIPT,IGBGCGC)
   CDUMBG1=CDUMBG1+C[9]*2.0f*v3sigma3[10];
   //CDUMBG2=CDUMBG2+C10*EC(IIPT,IGCGCGC)
   CDUMBG2=CDUMBG2+C[9]*v3sigma3[11];

/*
   cout << "CDUMB " << CDUMB << endl;
   cout << "CDUMBG1 " << CDUMBG1 << endl;
   cout << "CDUMBG2 " << CDUMBG2 << endl;
   exit(-1);
   // todo bien
*/

   C[0]=2.0f*DUMXX[1];
   C[1]=DUMNV[1]*DUMNV[1];
   C[2]=2.0f*DUMNV[1]*DUMGRV[1];
   C[3]=2.0f*DUMGRV[1]*DUMNV[1];
   C[4]=DUMGRV[1]*DUMNV[1];
   C[5]=DUMNV[1]*DUMGRV[1];
   C[6]=4.0f*DUMGRV[1]*DUMGRV[1];
   C[7]=2.0f*DUMGRV[1]*DUMGRV[1];
   C[8]=2.0f*DUMGRV[1]*DUMGRV[1];
   C[9]=DUMGRV[1]*DUMGRV[1];

// EXCHANGE
   double XDUMB, XDUMBG;
   //XDUMB=C1*EX(IIPT,KRBGB)
   XDUMB=C[0]*v2rhosigma[1];
   //XDUMBG=C1*TWO*EX(IIPT,KGBGB)
   XDUMBG=C[0]*2.0f*v2sigma2[1];
   //XDUMB=XDUMB+C2*EX(IIPT,KRBRBRB)
   XDUMB=XDUMB+C[1]*v3rho3[1];
   //XDUMBG=XDUMBG+C2*TWO*EX(IIPT,KRBRBGB)
   XDUMBG=XDUMBG+C[1]*2.0f*v3rho2sigma[1];
   //XDUMB=XDUMB+C3*EX(IIPT,KRBRBGB)
   XDUMB=XDUMB+C[2]*v3rho2sigma[1];
   //XDUMBG=XDUMBG+C3*TWO*EX(IIPT,KRBGBGB)
   XDUMBG=XDUMBG+C[2]*2.0f*v3rhosigma2[1];
   //XDUMB=XDUMB+C4*EX(IIPT,KRBRBGB)
   XDUMB=XDUMB+C[3]*v3rho2sigma[1];
   //XDUMBG=XDUMBG+C4*TWO*EX(IIPT,KRBGBGB)
   XDUMBG=XDUMBG+C[3]*2.0f*v3rhosigma2[1];
   //XDUMB=XDUMB+C7*EX(IIPT,KRBGBGB)
   XDUMB=XDUMB+C[6]*v3rhosigma2[1];
   //XDUMBG=XDUMBG+C7*TWO*EX(IIPT,KGBGBGB)
   XDUMBG=XDUMBG+C[6]*2.0f*v3sigma3[1];

/*
   cout << "XDUMB " << XDUMB << endl;
   cout << "XDUMBG " << XDUMBG << endl;
   exit(-1);
   // todo bien
*/

   //CDUMB=CDUMB+C1*EC(IIPT,IRBGB)
   CDUMB=CDUMB+C[0]*v2rhosigma[6];
   //CDUMBG1=CDUMBG1+C1*TWO*EC(IIPT,IGBGB)
   CDUMBG1=CDUMBG1+C[0]*2.0f*v2sigma2[5];
   //CDUMBG2=CDUMBG2+C1*EC(IIPT,IGBGC)
   CDUMBG2=CDUMBG2+C[0]*v2sigma2[6];
   //CDUMB=CDUMB+C2*EC(IIPT,IRBRBRB)
   CDUMB=CDUMB+C[1]*v3rho3[5];
   //CDUMBG1=CDUMBG1+C2*TWO*EC(IIPT,IRBRBGB)
   CDUMBG1=CDUMBG1+C[1]*2.0f*v3rho2sigma[9];
   //CDUMBG2=CDUMBG2+C2*EC(IIPT,IRBRBGC)
   CDUMBG2=CDUMBG2+C[1]*v3rho2sigma[10];
   //CDUMB=CDUMB+C3*EC(IIPT,IRBRBGB)
   CDUMB=CDUMB+C[2]*v3rho2sigma[9];
   //CDUMBG1=CDUMBG1+C3*TWO*EC(IIPT,IRBGBGB)
   CDUMBG1=CDUMBG1+C[2]*2.0f*v3rhosigma2[11];
   //CDUMBG2=CDUMBG2+C3*EC(IIPT,IRBGBGC)
   CDUMBG2=CDUMBG2+C[2]*v3rhosigma2[12];
   //CDUMB=CDUMB+C4*EC(IIPT,IRBRBGB)
   CDUMB=CDUMB+C[3]*v3rho2sigma[9];
   //CDUMBG1=CDUMBG1+C4*TWO*EC(IIPT,IRBGBGB)
   CDUMBG1=CDUMBG1+C[3]*2.0f*v3rhosigma2[11];
   //CDUMBG2=CDUMBG2+C4*EC(IIPT,IRBGBGC)
   CDUMBG2=CDUMBG2+C[3]*v3rhosigma2[12];
   //CDUMB=CDUMB+C5*EC(IIPT,IRBRBGC)
   CDUMB=CDUMB+C[4]*v3rho2sigma[10];
   //CDUMBG1=CDUMBG1+C5*TWO*EC(IIPT,IRBGBGC)
   CDUMBG1=CDUMBG1+C[4]*2.0f*v3rhosigma2[12];
   //CDUMBG2=CDUMBG2+C5*EC(IIPT,IRBGCGC)
   CDUMBG2=CDUMBG2+C[4]*v3rhosigma2[13];
   //CDUMB=CDUMB+C6*EC(IIPT,IRBRBGC)
   CDUMB=CDUMB+C[5]*v3rho2sigma[10];
   //CDUMBG1=CDUMBG1+C6*TWO*EC(IIPT,IRBGBGC)
   CDUMBG1=CDUMBG1+C[5]*2.0f*v3rhosigma2[12];
   //CDUMBG2=CDUMBG2+C6*EC(IIPT,IRBGCGC)
   CDUMBG2=CDUMBG2+C[5]*v3rhosigma2[13];
   //CDUMB=CDUMB+C7*EC(IIPT,IRBGBGB)
   CDUMB=CDUMB+C[6]*v3rhosigma2[11];
   //CDUMBG1=CDUMBG1+C7*TWO*EC(IIPT,IGBGBGB)
   CDUMBG1=CDUMBG1+C[6]*2.0f*v3sigma3[8];
   //CDUMBG2=CDUMBG2+C7*EC(IIPT,IGBGBGC)
   CDUMBG2=CDUMBG2+C[6]*v3sigma3[9];
   //CDUMB=CDUMB+C8*EC(IIPT,IRBGBGC)
   CDUMB=CDUMB+C[7]*v3rhosigma2[12];
   //CDUMBG1=CDUMBG1+C8*TWO*EC(IIPT,IGBGBGC)
   CDUMBG1=CDUMBG1+C[7]*2.0f*v3sigma3[9];
   //CDUMBG2=CDUMBG2+C8*EC(IIPT,IGBGCGC)
   CDUMBG2=CDUMBG2+C[7]*v3sigma3[10];
   //CDUMB=CDUMB+C9*EC(IIPT,IRBGBGC)
   CDUMB=CDUMB+C[8]*v3rhosigma2[12];
   //CDUMBG1=CDUMBG1+C9*TWO*EC(IIPT,IGBGBGC)
   CDUMBG1=CDUMBG1+C[8]*2.0f*v3sigma3[9];
   //CDUMBG2=CDUMBG2+C9*EC(IIPT,IGBGCGC)
   CDUMBG2=CDUMBG2+C[8]*v3sigma3[10];
   //CDUMB=CDUMB+C10*EC(IIPT,IRBGCGC)
   CDUMB=CDUMB+C[9]*v3rhosigma2[13];
   //CDUMBG1=CDUMBG1+C10*TWO*EC(IIPT,IGBGCGC)
   CDUMBG1=CDUMBG1+C[9]*2.0f*v3sigma3[10];
   //CDUMBG2=CDUMBG2+C10*EC(IIPT,IGCGCGC)
   CDUMBG2=CDUMBG2+C[9]*v3sigma3[11];

/*
   cout << "CDUMB " << CDUMB << endl;
   cout << "CDUMBG1 " << CDUMBG1 << endl;
   cout << "CDUMBG2 " << CDUMBG2 << endl;
   exit(-1);
   // todo bine
*/

   C[10]=DUMXX[2];
   C[11]=DUMNV[0]*DUMNV[1];
   C[12]=2.0f*DUMNV[0]*DUMGRV[1];
   C[13]=2.0f*DUMGRV[0]*DUMNV[1];
   C[14]=DUMNV[0]*DUMGRV[3];
   C[15]=DUMGRV[2]*DUMNV[1];
   C[16]=4.0f*DUMGRV[0]*DUMGRV[1];
   C[17]=2.0f*DUMGRV[0]*DUMGRV[3];
   C[18]=2.0f*DUMGRV[2]*DUMGRV[1];
   C[19]=DUMGRV[2]*DUMGRV[3];

   //CDUMB=CDUMB+C11*EC(IIPT,IRBGC)
   CDUMB=CDUMB+C[10]*v2rhosigma[7];
   //CDUMBG1=CDUMBG1+C11*TWO*EC(IIPT,IGBGC)
   CDUMBG1=CDUMBG1+C[10]*2.0f*v2sigma2[6];
   //CDUMBG2=CDUMBG2+C11*EC(IIPT,IGCGC)
   CDUMBG2=CDUMBG2+C[10]*v2sigma2[7];
   //CDUMB=CDUMB+C12*EC(IIPT,IRARBRB)
   CDUMB=CDUMB+C[11]*v3rho3[4];
   //CDUMBG1=CDUMBG1+C12*TWO*EC(IIPT,IRARBGB)
   CDUMBG1=CDUMBG1+C[11]*2.0f*v3rho2sigma[6];
   //CDUMBG2=CDUMBG2+C12*EC(IIPT,IRARBGC)
   CDUMBG2=CDUMBG2+C[11]*v3rho2sigma[7];
   //CDUMB=CDUMB+C13*EC(IIPT,IRARBGB)
   CDUMB=CDUMB+C[12]*v3rho2sigma[6];
   //CDUMBG1=CDUMBG1+C13*TWO*EC(IIPT,IRAGBGB)
   CDUMBG1=CDUMBG1+C[12]*2.0f*v3rhosigma2[5];
   //CDUMBG2=CDUMBG2+C13*EC(IIPT,IRAGBGC)
   CDUMBG2=CDUMBG2+C[12]*v3rhosigma2[6];
   //CDUMB=CDUMB+C14*EC(IIPT,IRBRBGA)
   CDUMB=CDUMB+C[13]*v3rho2sigma[8];
   //CDUMBG1=CDUMBG1+C14*TWO*EC(IIPT,IRBGAGB)
   CDUMBG1=CDUMBG1+C[13]*2.0f*v3rhosigma2[9];
   //CDUMBG2=CDUMBG2+C14*EC(IIPT,IRBGAGC)
   CDUMBG2=CDUMBG2+C[13]*v3rhosigma2[10];
   //CDUMB=CDUMB+C15*EC(IIPT,IRARBGC)
   CDUMB=CDUMB+C[14]*v3rho2sigma[7];
   //CDUMBG1=CDUMBG1+C15*TWO*EC(IIPT,IRAGBGC)
   CDUMBG1=CDUMBG1+C[14]*2.0f*v3rhosigma2[6];
   //CDUMBG2=CDUMBG2+C15*EC(IIPT,IRAGCGC)
   CDUMBG2=CDUMBG2+C[14]*v3rhosigma2[7];
   //CDUMB=CDUMB+C16*EC(IIPT,IRBRBGC)
   CDUMB=CDUMB+C[15]*v3rho2sigma[10];
   //CDUMBG1=CDUMBG1+C16*TWO*EC(IIPT,IRBGBGC)
   CDUMBG1=CDUMBG1+C[15]*2.0f*v3rhosigma2[12];
   //CDUMBG2=CDUMBG2+C16*EC(IIPT,IRBGCGC)
   CDUMBG2=CDUMBG2+C[15]*v3rhosigma2[13];
   //CDUMB=CDUMB+C17*EC(IIPT,IRBGAGB)
   CDUMB=CDUMB+C[16]*v3rhosigma2[9];
   //CDUMBG1=CDUMBG1+C17*TWO*EC(IIPT,IGAGBGB)
   CDUMBG1=CDUMBG1+C[16]*2.0f*v3sigma3[5];
   //CDUMBG2=CDUMBG2+C17*EC(IIPT,IGAGBGC)
   CDUMBG2=CDUMBG2+C[16]*v3sigma3[6];
   //CDUMB=CDUMB+C18*EC(IIPT,IRBGAGC)
   CDUMB=CDUMB+C[17]*v3rhosigma2[10];
   //CDUMBG1=CDUMBG1+C18*TWO*EC(IIPT,IGAGBGC)
   CDUMBG1=CDUMBG1+C[17]*2.0f*v3sigma3[6];
   //CDUMBG2=CDUMBG2+C18*EC(IIPT,IGAGCGC)
   CDUMBG2=CDUMBG2+C[17]*v3sigma3[7];
   //CDUMB=CDUMB+C19*EC(IIPT,IRBGBGC)
   CDUMB=CDUMB+C[18]*v3rhosigma2[12];
   //CDUMBG1=CDUMBG1+C19*TWO*EC(IIPT,IGBGBGC)
   CDUMBG1=CDUMBG1+C[18]*2.0f*v3sigma3[9];
   //CDUMBG2=CDUMBG2+C19*EC(IIPT,IGBGCGC)
   CDUMBG2=CDUMBG2+C[18]*v3sigma3[10];
   //CDUMB=CDUMB+C20*EC(IIPT,IRBGCGC)
   CDUMB=CDUMB+C[19]*v3rhosigma2[13];
   //CDUMBG1=CDUMBG1+C20*TWO*EC(IIPT,IGBGCGC)
   CDUMBG1=CDUMBG1+C[19]*2.0f*v3sigma3[10];
   //CDUMBG2=CDUMBG2+C20*EC(IIPT,IGCGCGC)
   CDUMBG2=CDUMBG2+C[19]*v3sigma3[11];
/*
   cout << "CDUMB " << CDUMB << endl;
   cout << "CDUMBG1 " << CDUMBG1 << endl;
   cout << "CDUMBG2 " << CDUMBG2 << endl;
   exit(-1);
   // todo bien
*/

   //CDUMB=CDUMB+C11*EC(IIPT,IRBGC)
   CDUMB=CDUMB+C[10]*v2rhosigma[7];
   //CDUMBG1=CDUMBG1+C11*TWO*EC(IIPT,IGBGC)
   CDUMBG1=CDUMBG1+C[10]*2.0f*v2sigma2[6];
   //CDUMBG2=CDUMBG2+C11*EC(IIPT,IGCGC)
   CDUMBG2=CDUMBG2+C[10]*v2sigma2[7];
   //CDUMB=CDUMB+C12*EC(IIPT,IRARBRB)
   CDUMB=CDUMB+C[11]*v3rho3[4];
   //CDUMBG1=CDUMBG1+C12*TWO*EC(IIPT,IRARBGB)
   CDUMBG1=CDUMBG1+C[11]*2.0f*v3rho2sigma[6];
   //CDUMBG2=CDUMBG2+C12*EC(IIPT,IRARBGC)
   CDUMBG2=CDUMBG2+C[11]*v3rho2sigma[7];
   //CDUMB=CDUMB+C13*EC(IIPT,IRARBGB)
   CDUMB=CDUMB+C[12]*v3rho2sigma[6];
   //CDUMBG1=CDUMBG1+C13*TWO*EC(IIPT,IRAGBGB)
   CDUMBG1=CDUMBG1+C[12]*2.0f*v3rhosigma2[5];
   //CDUMBG2=CDUMBG2+C13*EC(IIPT,IRAGBGC)
   CDUMBG2=CDUMBG2+C[12]*v3rhosigma2[6];
   //CDUMB=CDUMB+C14*EC(IIPT,IRBRBGA)
   CDUMB=CDUMB+C[13]*v3rho2sigma[8];
   //CDUMBG1=CDUMBG1+C14*TWO*EC(IIPT,IRBGAGB)
   CDUMBG1=CDUMBG1+C[13]*2.0f*v3rhosigma2[9];
   //CDUMBG2=CDUMBG2+C14*EC(IIPT,IRBGAGC)
   CDUMBG2=CDUMBG2+C[13]*v3rhosigma2[10];
   //CDUMB=CDUMB+C15*EC(IIPT,IRARBGC)
   CDUMB=CDUMB+C[14]*v3rho2sigma[7];
   //CDUMBG1=CDUMBG1+C15*TWO*EC(IIPT,IRAGBGC)
   CDUMBG1=CDUMBG1+C[14]*2.0f*v3rhosigma2[6];
   //CDUMBG2=CDUMBG2+C15*EC(IIPT,IRAGCGC)
   CDUMBG2=CDUMBG2+C[14]*v3rhosigma2[7];
   //CDUMB=CDUMB+C16*EC(IIPT,IRBRBGC)
   CDUMB=CDUMB+C[15]*v3rho2sigma[10];
   //CDUMBG1=CDUMBG1+C16*TWO*EC(IIPT,IRBGBGC)
   CDUMBG1=CDUMBG1+C[15]*2.0f*v3rhosigma2[12];
   //CDUMBG2=CDUMBG2+C16*EC(IIPT,IRBGCGC)
   CDUMBG2=CDUMBG2+C[15]*v3rhosigma2[13];
   //CDUMB=CDUMB+C17*EC(IIPT,IRBGAGB)
   CDUMB=CDUMB+C[16]*v3rhosigma2[9];
   //CDUMBG1=CDUMBG1+C17*TWO*EC(IIPT,IGAGBGB)
   CDUMBG1=CDUMBG1+C[16]*2.0f*v3sigma3[5];
   //CDUMBG2=CDUMBG2+C17*EC(IIPT,IGAGBGC)
   CDUMBG2=CDUMBG2+C[16]*v3sigma3[6];
   //CDUMB=CDUMB+C18*EC(IIPT,IRBGAGC)
   CDUMB=CDUMB+C[17]*v3rhosigma2[10];
   //CDUMBG1=CDUMBG1+C18*TWO*EC(IIPT,IGAGBGC)
   CDUMBG1=CDUMBG1+C[17]*2.0f*v3sigma3[6];
   //CDUMBG2=CDUMBG2+C18*EC(IIPT,IGAGCGC)
   CDUMBG2=CDUMBG2+C[17]*v3sigma3[7];
   //CDUMB=CDUMB+C19*EC(IIPT,IRBGBGC)
   CDUMB=CDUMB+C[18]*v3rhosigma2[12];
   //CDUMBG1=CDUMBG1+C19*TWO*EC(IIPT,IGBGBGC)
   CDUMBG1=CDUMBG1+C[18]*2.0f*v3sigma3[9];
   //CDUMBG2=CDUMBG2+C19*EC(IIPT,IGBGCGC)
   CDUMBG2=CDUMBG2+C[18]*v3sigma3[10];
   //CDUMB=CDUMB+C20*EC(IIPT,IRBGCGC)
   CDUMB=CDUMB+C[19]*v3rhosigma2[13];
   //CDUMBG1=CDUMBG1+C20*TWO*EC(IIPT,IGBGCGC)
   CDUMBG1=CDUMBG1+C[19]*2.0f*v3sigma3[10];
   //CDUMBG2=CDUMBG2+C20*EC(IIPT,IGCGCGC)
   CDUMBG2=CDUMBG2+C[19]*v3sigma3[11];
/*
   cout << "CDUMB " << CDUMB << endl;
   cout << "CDUMBG1 " << CDUMBG1 << endl;
   cout << "CDUMBG2 " << CDUMBG2 << endl;
   exit(-1);
   // todo bien
*/

// CONTRACTION OF FC
   double FCDUMA,FCDUMAG1,FCDUMAG2,FCDUMAX,FCDUMAY,FCDUMAZ;
   FCDUMA=XDUMA+CDUMA;
   FCDUMAG1=XDUMAG+CDUMAG1;
   FCDUMAG2=CDUMAG2;
   FCDUMAX=FCDUMAG1*dens[1]+FCDUMAG2*dens[1];
   FCDUMAY=FCDUMAG1*dens[2]+FCDUMAG2*dens[2];
   FCDUMAZ=FCDUMAG1*dens[3]+FCDUMAG2*dens[3];

   double FCDUMB,FCDUMBG1,FCDUMBG2,FCDUMBX,FCDUMBY,FCDUMBZ;
   FCDUMB=XDUMB+CDUMB;
   FCDUMBG1=XDUMBG+CDUMBG1;
   FCDUMBG2=CDUMBG2;
   FCDUMBX=FCDUMBG1*dens[1]+FCDUMBG2*dens[1];
   FCDUMBY=FCDUMBG1*dens[2]+FCDUMBG2*dens[2];
   FCDUMBZ=FCDUMBG1*dens[3]+FCDUMBG2*dens[3];
// END F CORE

// DENSITY FACTOR
   DDUM[0]+=FCDUMA;
   DDUM[1]+=FNCDUMAX+FCDUMAX;
   DDUM[2]+=FNCDUMAY+FCDUMAY;
   DDUM[3]+=FNCDUMAZ+FCDUMAZ;

// TRANSITION DENSITY FACTOR
   VDUM[0]=FNCDOMA;
   VDUM[1]=FNCDOMAX;
   VDUM[2]=FNCDOMAY;
   VDUM[3]=FNCDOMAZ;

/*
   cout << "DDUM[0] " << DDUM[0] << endl;
   cout << "DDUM[1] " << DDUM[1] << endl;
   cout << "DDUM[2] " << DDUM[2] << endl;
   cout << "DDUM[3] " << DDUM[3] << endl;
   cout << "VDUM[0] " << VDUM[0] << endl;
   cout << "VDUM[1] " << VDUM[1] << endl;
   cout << "VDUM[2] " << VDUM[2] << endl;
   cout << "VDUM[3] " << VDUM[3] << endl;
*/

/*
C     FOR GRDFUN
C     -- FXC CONTRIBUTION
C     --AA
      C1=TWO*(EX(IIPT,KGA)+EC(IIPT,IGA))
      C2=EX(IIPT,KRARA)+EC(IIPT,IRARA)
      C3=TWO*(EX(IIPT,KRAGA)+EC(IIPT,IRAGA))
      C4=TWO*(EX(IIPT,KRAGA)+EC(IIPT,IRAGA))
      C5=EC(IIPT,IRAGC)
      C6=EC(IIPT,IRAGC)
      C7=FOUR*(EX(IIPT,KGAGA)+EC(IIPT,IGAGA))
      C8=TWO*EC(IIPT,IGAGC)
      C9=TWO*EC(IIPT,IGAGC)
      C10=EC(IIPT,IGCGC)
      DUMA=ZERO
      DUMA=DUMA+C1*DUMXX(1)
      DUMA=DUMA+C2*DUMNV(1)**2
      DUMA=DUMA+C3*DUMNV(1)*DUMGRV(1)
      DUMA=DUMA+C4*DUMNV(1)*DUMGRV(1)
      DUMA=DUMA+C5*DUMNV(1)*DUMGRV(3)
      DUMA=DUMA+C6*DUMNV(1)*DUMGRV(3)
      DUMA=DUMA+C7*DUMGRV(1)**2
      DUMA=DUMA+C8*DUMGRV(1)*DUMGRV(3)
      DUMA=DUMA+C9*DUMGRV(1)*DUMGRV(3)
      DUMA=DUMA+C10*DUMGRV(3)**2
C     --BB
      C1=TWO*(EX(IIPT,KGB)+EC(IIPT,IGB))
      C2=EX(IIPT,KRBRB)+EC(IIPT,IRBRB)
      C3=TWO*(EX(IIPT,KRBGB)+EC(IIPT,IRBGB))
      C4=TWO*(EX(IIPT,KRBGB)+EC(IIPT,IRBGB))
      C5=EC(IIPT,IRBGC)
      C6=EC(IIPT,IRBGC)
      C7=FOUR*(EX(IIPT,KGBGB)+EC(IIPT,IGBGB))
      C8=TWO*EC(IIPT,IGBGC)
      C9=TWO*EC(IIPT,IGBGC)
      C10=EC(IIPT,IGCGC)
      DUMB=ZERO
      DUMB=DUMB+C1*DUMXX(2)
      DUMB=DUMB+C2*DUMNV(2)**2
      DUMB=DUMB+C3*DUMNV(2)*DUMGRV(2)
      DUMB=DUMB+C4*DUMNV(2)*DUMGRV(2)
      DUMB=DUMB+C5*DUMNV(2)*DUMGRV(4)
      DUMB=DUMB+C6*DUMNV(2)*DUMGRV(4)
      DUMB=DUMB+C7*DUMGRV(2)**2
      DUMB=DUMB+C8*DUMGRV(2)*DUMGRV(4)
      DUMB=DUMB+C9*DUMGRV(2)*DUMGRV(4)
      DUMB=DUMB+C10*DUMGRV(4)**2
C     --AB OR BA
      C11=EC(IIPT,IGC)
      C12=EC(IIPT,IRARB)
      C13=TWO*EC(IIPT,IRAGB)
      C14=TWO*EC(IIPT,IRBGA)
      C15=EC(IIPT,IRAGC)
      C16=EC(IIPT,IRBGC)
      C17=FOUR*EC(IIPT,IGAGB)
      C18=TWO*EC(IIPT,IGAGC)
      C19=TWO*EC(IIPT,IGBGC)
      C20=EC(IIPT,IGCGC)
      DUMAB=ZERO
      DUMAB=DUMAB+C11*DUMXX(3)
      DUMAB=DUMAB+C12*DUMNV(1)*DUMNV(2)
      DUMAB=DUMAB+C13*DUMNV(1)*DUMGRV(2)
      DUMAB=DUMAB+C14*DUMNV(2)*DUMGRV(1)
      DUMAB=DUMAB+C15*DUMNV(1)*DUMGRV(4)
      DUMAB=DUMAB+C16*DUMNV(2)*DUMGRV(3)
      DUMAB=DUMAB+C17*DUMGRV(1)*DUMGRV(2)
      DUMAB=DUMAB+C18*DUMGRV(1)*DUMGRV(4)
      DUMAB=DUMAB+C19*DUMGRV(2)*DUMGRV(3)
      DUMAB=DUMAB+C20*DUMGRV(3)*DUMGRV(4)
C
      GRDFUN(IPT)=GRDFUN(IPT)+DUMA+DUMB+DUMAB*TWO
*/
}
